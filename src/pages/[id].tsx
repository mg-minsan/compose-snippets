'use client';
import Head from 'next/head';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import a11yDark from 'react-syntax-highlighter/dist/cjs/styles/prism/a11y-dark';
import React from 'react';
import postgres from '../../composes/postgres';
import redis from '../../composes/redis';
import { GetStaticProps, GetStaticPaths, NextPage } from 'next';
import Image from 'next/image';
import icon from '../../icons/compose-gen.png';
import { Combobox, Transition } from '@headlessui/react';
import { MagnifyingGlassIcon } from '@heroicons/react/20/solid';
import { useRouter } from 'next/router';

const IndexPage: NextPage<Compose> = ({ content }) => {
  const [query, setQuery] = React.useState('');
  const services = [
    'redis',
    'postgres',
    'mysql',
    'mongodb',
    'elasticsearch',
    'rabbitmq',
    'kafka',
    'cassandra',
    'neo4j',
    'memcached',
    'couchdb',
    'influxdb',
    'mariadb',
    'mssql',
    'postgresql',
    'sqlite',
    'voldemort',
    'couchbas',
  ];

  const filteredServices =
    query === ''
      ? services
      : services.filter((service) =>
          service
            .toLowerCase()
            .replace(/\s+/g, '')
            .includes(query.toLowerCase().replace(/\s+/g, ''))
        );
  const router = useRouter();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-2/3 ml-auto mr-auto flex flex-col">
        <div className="flex items-center justify-center mt-8">
          <Image src={icon} alt="" width={88} height={88} />
          <h1 className="text-5xl text-white font-extrabold select-none">
            Compose
            <span className="bg-clip-text text-transparent bg-gradient-to-r from-teal-500 to-cyan-600">
              Snippets
            </span>
          </h1>
        </div>
        <Combobox
          onChange={(value: string) => {
            console.log(value);
            router.push(`/${value}`);
          }}
        >
          <div className="relative w-full cursor-default rounded-lg bg-white text-left shadow-md sm:text-sm divide-y divide-gray-100">
            <div className="flex items-center px-4">
              <MagnifyingGlassIcon className="h-6 w-6" />
              <Combobox.Input
                onChange={(e) => setQuery(e.target.value)}
                className="px-2 w-full bg-transparent border-0 text-sm text-gray-800 placeholder-gray-400 h-12 focus:ring-transparent focus:outline-none  focus:ring-0 hover:ring-0 focus-visible:ring-0"
                placeholder="Search..."
              />
            </div>
            <Transition
              as={React.Fragment}
              leave="transition ease-in duration-100"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
              afterLeave={() => setQuery('')}
            >
              <Combobox.Options className="absolute w-full max-h-44 text-sm overflow-y-auto font-medium -mt-2 rounded-b-lg">
                {filteredServices.length > 0 ? (
                  filteredServices.map((service) => (
                    <>
                      <Combobox.Option key={service} value={service}>
                        {({ active }) => (
                          <div
                            className={`px-4 py-1 ${
                              active ? 'bg-indigo-600' : 'bg-white'
                            }`}
                          >
                            <span
                              className={`${
                                active ? 'text-white' : 'text-gray-900'
                              }`}
                            >
                              {' '}
                              {service}
                            </span>
                          </div>
                        )}
                      </Combobox.Option>
                    </>
                  ))
                ) : (
                  <div className="bg-white px-4 py-1 text-sm font-medium text-gray-900 h-8">
                    <span>No Results Found</span>
                  </div>
                )}
              </Combobox.Options>
            </Transition>
          </div>
        </Combobox>
        <div className="mt-12 place-content-center ">
          <SyntaxHighlighter language="yaml" style={a11yDark}>
            {content}
          </SyntaxHighlighter>
        </div>
      </main>
    </>
  );
};

interface Compose {
  id: string;
  content: string;
}
const composes = [
  { id: 'postgres', content: postgres },
  { id: 'redis', content: redis },
];

export const getStaticProps: GetStaticProps<Compose> = async ({ params }) => {
  const compose = composes.find((compose) => compose.id === params?.id);

  if (compose == undefined) {
    return { props: composes[0] };
  }

  return { props: compose };
};

// export async function getStaticProps({ params }: GetStaticProps) {
//   const compose = composes.find((compose) => compose.params.id === params.id);
//   return compose;
// }
export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [
      { params: { id: 'postgres', content: postgres } },
      { params: { id: 'redis', content: redis } },
    ],
    fallback: false, // can also be true or 'blocking'
  };
};

export default IndexPage;
